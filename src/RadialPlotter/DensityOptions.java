package RadialPlotter;

import javax.swing.ButtonGroup;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;

@SuppressWarnings("serial")
public class DensityOptions extends javax.swing.JPanel {

    public DensityOptions(Main p) {
        try {
            this.parent = p;          
            this.plot = parent.getPlotFrame().getPlotPanel().getDensityPlot();
            this.prefs = parent.data.preferences;
            initComponents();
            units = new ButtonGroup();
            units.add(this.aButton);
            units.add(this.kaButton);
            units.add(this.MaButton);
            this.refresh();
        } catch(Exception e) { 
            if (Data.debugmode){e.printStackTrace(System.out);}
        }
    }

    /** This method is called from within the constructor to
     * initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        KDEareaCheckbox = new javax.swing.JCheckBox();
        PDPareaCheckbox = new javax.swing.JCheckBox();
        HistAreaCheckbox = new javax.swing.JCheckBox();
        TicksLineCheckbox = new javax.swing.JCheckBox();
        OKbutton = new javax.swing.JButton();
        MinTextBox = new javax.swing.JTextField();
        MaxTextBox = new javax.swing.JTextField();
        BinWidthTextBox = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        DefaultButton = new javax.swing.JButton();
        KDElineCheckbox = new javax.swing.JCheckBox();
        PDPlineCheckbox = new javax.swing.JCheckBox();
        HistLineCheckbox = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        PointsLineCheckbox = new javax.swing.JCheckBox();
        CancelButton = new javax.swing.JButton();
        BandwidthTextBox = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        SavePrefsCheckBox = new javax.swing.JCheckBox();
        aButton = new javax.swing.JRadioButton();
        kaButton = new javax.swing.JRadioButton();
        MaButton = new javax.swing.JRadioButton();
        BellsLineCheckBox = new javax.swing.JCheckBox();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        PointsAreaCheckbox = new javax.swing.JCheckBox();
        bellHeightTextBox = new javax.swing.JTextField();
        bellHeightPercentLabel = new javax.swing.JLabel();
        bellHeightLabel = new javax.swing.JLabel();
        adaptiveCheckBox = new javax.swing.JCheckBox();
        epanechnikovCheckBox = new javax.swing.JCheckBox();
        MaLabel = new javax.swing.JLabel();
        kaLabel = new javax.swing.JLabel();
        aLabel = new javax.swing.JLabel();
        normaliseCheckBox = new javax.swing.JCheckBox();
        AreaTextBox = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        MarkerBox = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();

        setPreferredSize(null);

        KDEareaCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KDEareaCheckboxActionPerformed(evt);
            }
        });

        PDPareaCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PDPareaCheckboxActionPerformed(evt);
            }
        });

        HistAreaCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HistAreaCheckboxActionPerformed(evt);
            }
        });

        TicksLineCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TicksLineCheckboxActionPerformed(evt);
            }
        });

        OKbutton.setText("OK");
        OKbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKbuttonActionPerformed(evt);
            }
        });

        jLabel1.setText("min");

        jLabel2.setText("max");

        jLabel3.setText("area:");

        DefaultButton.setText("Default");
        DefaultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DefaultButtonActionPerformed(evt);
            }
        });

        KDElineCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KDElineCheckboxActionPerformed(evt);
            }
        });

        PDPlineCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PDPlineCheckboxActionPerformed(evt);
            }
        });

        HistLineCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HistLineCheckboxActionPerformed(evt);
            }
        });

        jLabel4.setText("stroke");

        jLabel5.setText("fill");

        jLabel6.setText("Kernel Density Estimate (KDE)");

        jLabel7.setText("Probability Density Plot (PDP)");

        jLabel8.setText("Histogram");

        jLabel9.setText("Points");

        PointsLineCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PointsLineCheckboxActionPerformed(evt);
            }
        });

        CancelButton.setText("Cancel");
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonActionPerformed(evt);
            }
        });

        jLabel10.setText("bandwidth:");

        jLabel11.setText("time axis:");

        SavePrefsCheckBox.setText("save preferences for next time");
        SavePrefsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SavePrefsCheckBoxActionPerformed(evt);
            }
        });

        aButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aButtonActionPerformed(evt);
            }
        });

        kaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kaButtonActionPerformed(evt);
            }
        });

        MaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MaButtonActionPerformed(evt);
            }
        });

        BellsLineCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BellsLineCheckBoxActionPerformed(evt);
            }
        });

        jLabel13.setText("Ticks");

        jLabel14.setText("Bells");

        PointsAreaCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PointsAreaCheckboxActionPerformed(evt);
            }
        });

        bellHeightPercentLabel.setText("%");

        bellHeightLabel.setText("height:");

        adaptiveCheckBox.setText("adaptive");
        adaptiveCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adaptiveCheckBoxActionPerformed(evt);
            }
        });

        epanechnikovCheckBox.setText("Epanechnikov");
        epanechnikovCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                epanechnikovCheckBoxActionPerformed(evt);
            }
        });

        MaLabel.setText("Ma");

        kaLabel.setText("ka");

        aLabel.setText("a");

        normaliseCheckBox.setText("normalise");
        normaliseCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normaliseCheckBoxActionPerformed(evt);
            }
        });

        AreaTextBox.setEditable(false);

        jLabel12.setText("bin width:");

        jLabel15.setText("markers:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                .addComponent(KDEareaCheckbox)
                                .addComponent(PDPareaCheckbox)
                                .addComponent(HistAreaCheckbox)
                                .addComponent(jLabel5))
                            .addComponent(PointsAreaCheckbox))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(244, 244, 244)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(MaLabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(kaLabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(aLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(MaButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(kaButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(aButton))))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(PDPlineCheckbox)
                                            .addComponent(KDElineCheckbox)
                                            .addComponent(HistLineCheckbox))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel8)
                                            .addComponent(jLabel7)
                                            .addComponent(jLabel6)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(PointsLineCheckbox)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(TicksLineCheckbox)
                                        .addGap(0, 0, 0)
                                        .addComponent(jLabel13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(BellsLineCheckBox)
                                                .addGap(0, 0, 0)
                                                .addComponent(jLabel14)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(bellHeightLabel)
                                                .addGap(0, 0, 0)
                                                .addComponent(bellHeightTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, 0)
                                                .addComponent(bellHeightPercentLabel))))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12)
                            .addComponent(jLabel3)
                            .addComponent(jLabel15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                    .addComponent(jLabel1)
                                    .addComponent(MinTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(BandwidthTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(BinWidthTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(AreaTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(MaxTextBox, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                                    .addComponent(adaptiveCheckBox)
                                    .addComponent(normaliseCheckBox)
                                    .addComponent(epanechnikovCheckBox)))
                            .addComponent(MarkerBox, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(SavePrefsCheckBox)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(DefaultButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(OKbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {CancelButton, DefaultButton, OKbutton});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {MaxTextBox, MinTextBox});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel6)
                    .addComponent(KDElineCheckbox)
                    .addComponent(KDEareaCheckbox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel7)
                    .addComponent(PDPlineCheckbox)
                    .addComponent(PDPareaCheckbox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel8)
                    .addComponent(HistLineCheckbox)
                    .addComponent(HistAreaCheckbox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(PointsLineCheckbox)
                    .addComponent(jLabel9)
                    .addComponent(TicksLineCheckbox)
                    .addComponent(jLabel13)
                    .addComponent(BellsLineCheckBox)
                    .addComponent(jLabel14)
                    .addComponent(bellHeightTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bellHeightPercentLabel)
                    .addComponent(PointsAreaCheckbox)
                    .addComponent(bellHeightLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel2))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(MaLabel)
                        .addComponent(kaLabel)
                        .addComponent(aLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel11)
                    .addComponent(MinTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MaxTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MaButton)
                    .addComponent(kaButton)
                    .addComponent(aButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(BandwidthTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(adaptiveCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(BinWidthTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(epanechnikovCheckBox)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AreaTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(normaliseCheckBox)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MarkerBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SavePrefsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DefaultButton)
                    .addComponent(CancelButton)
                    .addComponent(OKbutton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel15.getAccessibleContext().setAccessibleName("extra ticks:");
    }// </editor-fold>//GEN-END:initComponents

    private void refresh() throws Exception{
        if (prefs.fissiontracks()){
            this.aButton.setVisible(true);
            this.kaButton.setVisible(true);
            this.MaButton.setVisible(true);
            this.aLabel.setVisible(true);
            this.kaLabel.setVisible(true);
            this.MaLabel.setVisible(true);
            this.MaButton.setSelected(plot.getUnit()==Data.MA);
            this.kaButton.setSelected(plot.getUnit()==Data.KA);
            this.aButton.setSelected(plot.getUnit()==Data.A);
        } else {
            this.aButton.setVisible(false);
            this.kaButton.setVisible(false);
            this.MaButton.setVisible(false);
            this.aLabel.setVisible(false);
            this.kaLabel.setVisible(false);
            this.MaLabel.setVisible(false);            
        }
        this.bellHeightTextBox.setText(Integer.toString(prefs.bellheight()));
        this.KDEareaCheckbox.setSelected(prefs.doKDEfill());
        this.PDPareaCheckbox.setSelected(prefs.doPDPfill());
        this.HistAreaCheckbox.setSelected(prefs.dohistfill());
        this.PointsAreaCheckbox.setSelected(prefs.dopointsfill());
        this.KDElineCheckbox.setSelected(prefs.doKDEstroke());
        this.PDPlineCheckbox.setSelected(prefs.doPDPstroke());
        this.HistLineCheckbox.setSelected(prefs.dohiststroke());
        this.PointsLineCheckbox.setSelected(prefs.dopointstroke());
        this.TicksLineCheckbox.setSelected(prefs.dotickstroke());
        this.BellsLineCheckBox.setSelected(prefs.dobellstroke());
        this.adaptiveCheckBox.setSelected(prefs.adaptive());
        this.epanechnikovCheckBox.setSelected(prefs.epanechnikov());
        this.normaliseCheckBox.setSelected(prefs.normalise());
        this.AreaTextBox.setEditable(prefs.normalise());
        if (prefs.dobellstroke() | prefs.dotickstroke()){
            showBellHeight(true);
        } else {
            showBellHeight(false);           
        }
        this.showAgeBounds();
        this.SavePrefsCheckBox.setSelected(prefs.saveprefs());
        this.MarkerBox.setText(plot.markers);
    }
    
    private void showBellHeight(boolean doIt) {
        this.bellHeightLabel.setVisible(doIt);
        this.bellHeightPercentLabel.setVisible(doIt);
        this.bellHeightTextBox.setVisible(doIt);
    }

    private void showAgeBounds() throws Exception{
        this.MinTextBox.setText(this.getMin());
        this.MaxTextBox.setText(this.getMax());
        this.BandwidthTextBox.setText(plot.getBandWidth());
        this.BinWidthTextBox.setText(this.getBinWidth());
        this.AreaTextBox.setText(ToolBox.num2string(plot.getArea(),2));
        // values are copied to variables because later we'll check if they've changed
        this.minage = this.MinTextBox.getText();
        this.maxage = this.MaxTextBox.getText();
        this.bandwidth = this.BandwidthTextBox.getText();
        this.binwidth = this.BinWidthTextBox.getText();
        this.area = this.AreaTextBox.getText();
    }

    private String getMin() throws Exception{
        return ToolBox.num2string(plot.getMin()/plot.unit,2);
    }

    private String getMax() throws Exception{
        return ToolBox.num2string(plot.getMax()/plot.unit,2);
    }

    private String getBinWidth() throws Exception {
        double bw = plot.getBinWidth();
        if (bw<=0){
            return "";
        } else if (prefs.linear()) {
            return ToolBox.num2string(bw/plot.unit,2);
        } else {
            return ToolBox.num2string(bw,2);
        }
    }

    private void KDEareaCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KDEareaCheckboxActionPerformed
        try {
            prefs.doKDEfill(this.KDEareaCheckbox.isSelected());
        } catch (Exception ex) {
            if (Data.debugmode){ex.printStackTrace(System.out);}
        }
    }//GEN-LAST:event_KDEareaCheckboxActionPerformed

    private void PDPareaCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PDPareaCheckboxActionPerformed
        try {
            prefs.doPDPfill(this.PDPareaCheckbox.isSelected());
        } catch (Exception ex) {
            if (Data.debugmode){ex.printStackTrace(System.out);}
        }
    }//GEN-LAST:event_PDPareaCheckboxActionPerformed

    private void HistAreaCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HistAreaCheckboxActionPerformed
        try {
            prefs.dohistfill(this.HistAreaCheckbox.isSelected());
        } catch (Exception ex) {
            if (Data.debugmode){ex.printStackTrace(System.out);}
        }
    }//GEN-LAST:event_HistAreaCheckboxActionPerformed

    private void TicksLineCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TicksLineCheckboxActionPerformed
        try {
            prefs.dotickstroke(this.TicksLineCheckbox.isSelected());
            this.showBellHeight(prefs.dotickstroke()|prefs.dobellstroke());
        } catch (Exception ex) {
            if (Data.debugmode){ex.printStackTrace(System.out);}
        }
    }//GEN-LAST:event_TicksLineCheckboxActionPerformed

    private void OKbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKbuttonActionPerformed
        try {
            double min, max, bwa;
            String foo = this.MinTextBox.getText(), bar = this.MaxTextBox.getText();
            if ((!minage.equals(foo) | !maxage.equals(bar)) & 
                ToolBox.isNumeric(foo) & ToolBox.isNumeric(bar)) {
                min = Double.valueOf(this.MinTextBox.getText())*plot.unit;
                max = Double.valueOf(this.MaxTextBox.getText())*plot.unit;
                plot.autoTimeScale(false);
                plot.setMinMaxAge(min, max);
                plot.setOffset();
                plot.initTimeScale(min, max);
            }
            if(prefs.dobellstroke() | prefs.dotickstroke()){
                prefs.bellheight(Integer.parseInt(this.bellHeightTextBox.getText()));
            }
            foo = this.BandwidthTextBox.getText();
            plot.checkBandWidth(foo);
            foo = this.BinWidthTextBox.getText();
            plot.checkBinWidth(foo);
            foo = this.AreaTextBox.getText();
            if (!this.area.equals(foo) & ToolBox.isNumeric(foo)){
                plot.autoArea(false);
                bwa = Double.valueOf(foo);
            } else {
                bwa = plot.getArea();
            }
            if (prefs.normalise() & bwa>0.0){
                plot.setArea(bwa);
            } else {
                plot.autoArea(true); // if the area is invalid, switch to auto
            }
            plot.markers = this.MarkerBox.getText();
        } catch (Exception ex) {
            if (Data.debugmode){
                ex.printStackTrace(System.out);
            }
        } finally {
            SwingUtilities.getWindowAncestor(this).dispose();
        }
    }//GEN-LAST:event_OKbuttonActionPerformed

    private void DefaultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DefaultButtonActionPerformed
        try {
            this.normaliseCheckBox.setSelected(false);
            this.plot.setDefault();
            this.plot.refresh(plot.data);
            this.refresh();
        } catch (Exception ex) {
            if (Data.debugmode){
                ex.printStackTrace(System.out);
            }
        }
    }//GEN-LAST:event_DefaultButtonActionPerformed

    private void PointsLineCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PointsLineCheckboxActionPerformed
        try {
            prefs.dopointstroke(this.PointsLineCheckbox.isSelected());
        } catch (Exception ex) {
            if (Data.debugmode){ex.printStackTrace(System.out);}
        }
    }//GEN-LAST:event_PointsLineCheckboxActionPerformed

    private void KDElineCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KDElineCheckboxActionPerformed
        try {
            prefs.doKDEstroke(this.KDElineCheckbox.isSelected());
        } catch (Exception ex) {
            if (Data.debugmode){ex.printStackTrace(System.out);}
        }
    }//GEN-LAST:event_KDElineCheckboxActionPerformed

    private void PDPlineCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PDPlineCheckboxActionPerformed
        try {
            prefs.doPDPstroke(this.PDPlineCheckbox.isSelected());
        } catch (Exception ex) {
            if (Data.debugmode){ex.printStackTrace(System.out);}
        }
    }//GEN-LAST:event_PDPlineCheckboxActionPerformed

    private void HistLineCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HistLineCheckboxActionPerformed
        try {
            prefs.dohiststroke(this.HistLineCheckbox.isSelected());
        } catch (Exception ex) {
            if (Data.debugmode){ex.printStackTrace(System.out);}
        }
    }//GEN-LAST:event_HistLineCheckboxActionPerformed

    private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelButtonActionPerformed
        SwingUtilities.getWindowAncestor(this).dispose();
    }//GEN-LAST:event_CancelButtonActionPerformed

    private void aButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aButtonActionPerformed
        try{
            plot.setUnit(Data.A);
            this.showAgeBounds();
            plot.fixUnits(true);
        } catch (Exception e){
            if (Data.debugmode){e.printStackTrace(System.out);}
        }
}//GEN-LAST:event_aButtonActionPerformed

    private void kaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kaButtonActionPerformed
        try{
            plot.setUnit(Data.KA);
            this.showAgeBounds();
            plot.fixUnits(true);
        } catch (Exception e){
            if (Data.debugmode){e.printStackTrace(System.out);}
        }
}//GEN-LAST:event_kaButtonActionPerformed

    private void MaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MaButtonActionPerformed
        try{
            plot.setUnit(Data.MA);
            this.showAgeBounds();
            plot.fixUnits(true);
        } catch (Exception e){
            if (Data.debugmode){e.printStackTrace(System.out);}
        }
}//GEN-LAST:event_MaButtonActionPerformed

    private void BellsLineCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BellsLineCheckBoxActionPerformed
        try {
            prefs.dobellstroke(this.BellsLineCheckBox.isSelected());
            this.showBellHeight(prefs.dotickstroke()|prefs.dobellstroke());
        } catch (Exception ex) {
            if (Data.debugmode){ex.printStackTrace(System.out);}
        }
    }//GEN-LAST:event_BellsLineCheckBoxActionPerformed

    private void PointsAreaCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PointsAreaCheckboxActionPerformed
        try {
            prefs.dopointsfill(this.PointsAreaCheckbox.isSelected());
        } catch (Exception ex) {
            if (Data.debugmode){ex.printStackTrace(System.out);}
        }
    }//GEN-LAST:event_PointsAreaCheckboxActionPerformed

    private void adaptiveCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adaptiveCheckBoxActionPerformed
        try {
            boolean doIt = this.adaptiveCheckBox.isSelected();
            prefs.adaptive(doIt);
            if (!plot.autoBinWidth) plot.setBinWidth();
        } catch (Exception ex) {
            if (Data.debugmode){ex.printStackTrace(System.out);}
        }        
    }//GEN-LAST:event_adaptiveCheckBoxActionPerformed

    private void SavePrefsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SavePrefsCheckBoxActionPerformed
        try {
            prefs.saveprefs(this.SavePrefsCheckBox.isSelected());
        } catch (Exception ex) {
            if (Data.debugmode){ex.printStackTrace(System.out);}
        }  
    }//GEN-LAST:event_SavePrefsCheckBoxActionPerformed

    private void epanechnikovCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_epanechnikovCheckBoxActionPerformed
        try {
            boolean doIt = this.epanechnikovCheckBox.isSelected();
            prefs.epanechnikov(doIt);
            if (!plot.autoBinWidth) plot.setBinWidth();
        } catch (Exception ex) {
            if (Data.debugmode){ex.printStackTrace(System.out);}
        }     
    }//GEN-LAST:event_epanechnikovCheckBoxActionPerformed

    private void normaliseCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normaliseCheckBoxActionPerformed
        try {
            boolean doIt = this.normaliseCheckBox.isSelected();
            prefs.normalise(doIt);
            if (!plot.autoBinWidth) plot.setBinWidth();
            this.AreaTextBox.setEditable(doIt);
        } catch (Exception ex) {
            if (Data.debugmode){ex.printStackTrace(System.out);}
        }  
    }//GEN-LAST:event_normaliseCheckBoxActionPerformed

public static void createAndShowGUI(Main parent) throws Exception {
    //Create and set up the window.
    JFrame frame = new JFrame("Set Scale and Labels");
    frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

    //Create and set up the content pane.
    JComponent newContentPane = new DensityOptions(parent);
    newContentPane.setOpaque(true); //content panes must be opaque
    frame.setContentPane(newContentPane);

    //Display the window.
    frame.pack();
    frame.setVisible(true);
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AreaTextBox;
    private javax.swing.JTextField BandwidthTextBox;
    private javax.swing.JCheckBox BellsLineCheckBox;
    private javax.swing.JTextField BinWidthTextBox;
    private javax.swing.JButton CancelButton;
    private javax.swing.JButton DefaultButton;
    private javax.swing.JCheckBox HistAreaCheckbox;
    private javax.swing.JCheckBox HistLineCheckbox;
    private javax.swing.JCheckBox KDEareaCheckbox;
    private javax.swing.JCheckBox KDElineCheckbox;
    private javax.swing.JRadioButton MaButton;
    private javax.swing.JLabel MaLabel;
    private javax.swing.JTextField MarkerBox;
    private javax.swing.JTextField MaxTextBox;
    private javax.swing.JTextField MinTextBox;
    private javax.swing.JButton OKbutton;
    private javax.swing.JCheckBox PDPareaCheckbox;
    private javax.swing.JCheckBox PDPlineCheckbox;
    private javax.swing.JCheckBox PointsAreaCheckbox;
    private javax.swing.JCheckBox PointsLineCheckbox;
    private javax.swing.JCheckBox SavePrefsCheckBox;
    private javax.swing.JCheckBox TicksLineCheckbox;
    private javax.swing.JRadioButton aButton;
    private javax.swing.JLabel aLabel;
    private javax.swing.JCheckBox adaptiveCheckBox;
    private javax.swing.JLabel bellHeightLabel;
    private javax.swing.JLabel bellHeightPercentLabel;
    private javax.swing.JTextField bellHeightTextBox;
    private javax.swing.JCheckBox epanechnikovCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JRadioButton kaButton;
    private javax.swing.JLabel kaLabel;
    private javax.swing.JCheckBox normaliseCheckBox;
    // End of variables declaration//GEN-END:variables

    private DensityPlot plot;
    private Main parent;
    private Preferences prefs;
    private ButtonGroup units;
    private String minage, maxage, bandwidth, binwidth, area;

}
